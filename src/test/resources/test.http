### Create valid application, process by FastBank and SolidBank
POST http://localhost:8080/api/v1/applications
Content-Type: application/json

{
    "phone": "+37129999999",
    "email":"test@mail.com",
    "monthlyIncome": 5000,
    "monthlyExpenses":2000,
    "monthlyCreditLiabilities": 0,
    "dependents": 0,
    "isCheckedConsent": true,
    "amount": 2000.00,
    "maritalStatus": "SINGLE"
}
> {%
    client.test("Status is 200", function() {
        client.assert(response.status === 200, "Expected status 200, got " + response.status);
    });
    client.global.set("applicationId", response.body.offers[0].applicationId);
    client.global.set("offerId", response.body.offers[0].id);
%}

### Select offer
PATCH http://localhost:8080/api/v1/offers
Content-Type: application/json

{
    "id": "{{offerId}}",
    "applicationId":"{{applicationId}}"
}
> {%
    client.test("Status is 200", function() {
        client.assert(response.status === 200, "Expected status 200, got " + response.status);
    });
%}


### Create valid application, process by SolidBank only,
### because FastBank accepts only Latvian phone numbers for processing
POST http://localhost:8080/api/v1/applications
Content-Type: application/json

{
  "phone": "+37229999999",
  "email":"test@mail.com",
  "monthlyIncome": 5000,
  "monthlyExpenses":2000,
  "monthlyCreditLiabilities": 0,
  "dependents": 0,
  "isCheckedConsent": true,
  "amount": 2000.00,
  "maritalStatus": "SINGLE"
}
> {%
    client.test("Status is 200", function() {
        client.assert(response.status === 200, "Expected status 200, got " + response.status);
    });
%}

### Create invalid application
POST http://localhost:8080/api/v1/applications
Content-Type: application/json

{
  "phone": "",
  "monthlyExpenses":2000,
  "monthlyCreditLiabilities": 5000000,
  "dependents": 0,
  "isCheckedConsent": true,
  "amount": -2000.00,
  "maritalStatus": "SINGLE"
}
> {%
    client.test("Should return 400 with validation messages", function() {
        client.assert(response.status === 400, "Expected 400 Bad Request");

        const body = response.body;

        client.assert(body.amount === "must be greater than or equal to 100.00", "Incorrect message for amount");
        client.assert(body.phone === "must not be blank", "Incorrect message for phone");
        client.assert(body.monthlyCreditLiabilities === "must be less than or equal to 1000000.00", "Incorrect message for liabilities");
        client.assert(body.email === "must not be blank", "Incorrect message for email");
        client.assert(body.monthlyIncome === "must not be null", "Incorrect message for income");
    });
%}